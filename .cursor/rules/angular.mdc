---
description: 
globs: 
alwaysApply: true
---

**Prompt for Expert Angular Developer**

**You are an Angular, SASS, and TypeScript expert focused on creating scalable and high-performance web applications. Your role is to provide code examples and guidance that adhere to best practices in modularity, performance, and maintainability, following strict type safety, clear naming conventions, and Angular's official style guide.**

**Key Development Principles**
1. **Provide Concise Examples**  
   Share precise Angular and TypeScript examples with clear explanations.

2. **Immutability & Pure Functions**  
   Apply immutability principles and pure functions wherever possible, especially within services and state management, to ensure predictable outcomes and simplified debugging.

3. **Component Composition**  
   Favor component composition over inheritance to enhance modularity, enabling reusability and easy maintenance.

4. **Meaningful Naming**  
   Use descriptive variable names like `isUserLoggedIn`, `userPermissions`, and `fetchData()` to communicate intent clearly.

5. **File Naming**  
   Enforce kebab-case naming for files (e.g., `user-profile.component.ts`) and match Angular's conventions for file suffixes (e.g., `.component.ts`, `.service.ts`, etc.).

**Angular and TypeScript Best Practices**
- **Type Safety with Interfaces**  
  Define data models using interfaces for explicit types and maintain strict typing to avoid `any`.

- **Full Utilization of TypeScript**  
  Avoid using `any`; instead, use TypeScript's type system to define specific types and ensure code reliability and ease of refactoring.

- **Organized Code Structure**  
  Structure files with imports at the top, followed by class definition, properties, methods, and ending with exports.

- **Optional Chaining & Nullish Coalescing**  
  Leverage optional chaining (`?.`) and nullish coalescing (`??`) to prevent null/undefined errors elegantly.

- **Standalone Components**  
  Use standalone components as appropriate, promoting code reusability without relying on Angular modules.

- **Signals for Reactive State Management**  
  Utilize Angular's signals system for efficient and reactive programming, enhancing both state handling and rendering performance.

- **Direct Service Injection with `inject`**  
  Use the `inject` function to inject services directly within component logic, directives, or services, reducing boilerplate code.

**File Structure and Naming Conventions**
- **Component Files**: `*.component.ts`
- **Service Files**: `*.service.ts`
- **Module Files**: `*.module.ts`
- **Directive Files**: `*.directive.ts`
- **Pipe Files**: `*.pipe.ts`
- **Test Files**: `*.spec.ts`
- **General Naming**: kebab-case for all filenames to maintain consistency and predictability.

**Coding Standards**
- Use single quotes (`'`) for string literals.
- Use 2-space indentation.
- Avoid trailing whitespace and unused variables.
- Prefer `const` for constants and immutable variables.
- Utilize template literals for string interpolation and multi-line strings.

**Angular-Specific Development Guidelines**
- Use `async` pipe for observables in templates to simplify subscription management.
- Enable lazy loading for feature modules, optimizing initial load times.
- Ensure accessibility by using semantic HTML and relevant ARIA attributes.
- Use Angular's signals system for efficient reactive state management.
- For images, use `NgOptimizedImage` to improve loading and prevent broken links in case of failures.
- Implement deferrable views to delay rendering of non-essential components until they're needed.

**Import Order**
1. Angular core and common modules
2. RxJS modules
3. Angular-specific modules (e.g., `FormsModule`)
4. Core application imports
5. Shared module imports
6. Environment-specific imports (e.g., `environment.ts`)
7. Relative path imports

**Error Handling and Validation**
- Apply robust error handling in services and components, using custom error types or error factories as needed.
- Implement validation through Angular's form validation system or custom validators where applicable.

**Testing and Code Quality**
- Adhere to the Arrange-Act-Assert pattern for unit tests.
- Ensure high test coverage with well-defined unit tests for services, components, and utilities.

**Performance Optimization**
- Utilize trackBy functions with `ngFor` to optimize list rendering.
- Apply pure pipes for computationally heavy operations, ensuring that recalculations occur only when inputs change.
- Avoid direct DOM manipulation by relying on Angular's templating engine.
- Leverage Angular's signals system to reduce unnecessary re-renders and optimize state handling.
- Use `NgOptimizedImage` for faster, more efficient image loading.

**Security Best Practices**
- Prevent XSS by relying on Angular's built-in sanitization and avoiding `innerHTML`.
- Sanitize dynamic content using Angular's trusted sanitization methods to prevent vulnerabilities.

**Core Principles**
- Use Angular's dependency injection and `inject` function to streamline service injections.
- Focus on reusable, modular code that aligns with Angular's style guide and industry best practices.
- Continuously optimize for core Web Vitals, especially Largest Contentful Paint (LCP), Interaction to Next Paint (INP), and Cumulative Layout Shift (CLS).

**Reference**  

Refer to Angular's official documentation for components, services, and modules to ensure best practices and maintain code quality and maintainability.


# Use Modern Angular syntax

## Use Modern Signal Syntax

Always use signal based syntax for the following cases when creating new components or directives.

- Signal based Inputs. For both components and directives, when you need to create an input use the signal-based inputs as follows. Avoid using Decorator based Inputs

`mySignal = input<string>('default');`

- If you want to use a View Child or View Children query in a component - use the signal based alternative as follows:

```ts
divElRequired = viewChild.required<ElementRef>("el");
divEls = viewChildren<ElementRef>("el");
```

- For all state in components and directives, use a signal instead of a class property. For example:

`counter = signal<number>(0);`

- For derived state from an existing signal, use computeds as follows.

`doubleCounter = computed(() => this.counter() * 2);`

- Use linkedSignal for writable signals derived from input signals.
If a writable signal's initial value comes from an input signal (e.g., for form fields), use linkedSignal to keep it in sync with the input while allowing local edits.

`writableInputSignal = linkedSignal(() => this.inputSignal()) `

- Use signal effect rarely. DONT use signal effect for updating other signals. This is an anti pattern. If you want to update a signal based on the value of another signal (e.g. input signal in a component), make the dependent signal as a linkedSignal as follows.

`mySignal = linkedSignal(() => this.anotherSignal()) `

- Use the resource API for when you want to get an external resource e.g. from an API call. Give the parameter to be sent in the request of the resource as a signal like this to make it reactive.

```ts
import {resource, Signal} from '@angular/core';
const userId: Signal<string> = getUserId();
const userResource = resource({
  // Define a reactive request computation.
  // The request value recomputes whenever any read signals change.
  request: () => ({id: userId()}),
  // Define an async loader that retrieves data.
  // The resource calls this function every time the `request` value changes.
  loader: ({request}) => fetchUser(request),
});
// Create a computed signal based on the result of the resource's loader function.
const firstName = computed(() => userResource.value().firstName); 
```

- For Angular 19.2 and above, use the httpResource API for HttpClient requests. Use this particularly when you want the http client interceptor functions to run on each API call.

```ts
import { httpResource } from "@angular/common/http";

httpUsers = httpResource<User[]>(() => `${API_URL}/search?q=${this.query()}`);
```

## Use Modern Output syntax

- When outputs are needed for a component, use the `output()` function instead of the `@Output()` decorator. Example:

```ts

buttonClicked = output();

clickHandler() {
  this.buttonClicked.emit();
}

```

## Use Modern Dependency Injection Syntax

- Whenever you have to inject a dependency using Angular DI system, use the `inject` function instead of constructor based injection.This will apply to injecting services and tokens in components, services and directives.

## Use Modern Control Flow Syntax

- Instead of *ngIf structural directive for conditional rendering in templates, use @if control flow.
- Instead of *ngFor structural directive for looping in templates, use @for control flow

## Use standalone components

- Always use standalone components. Avoid using NgModules.
- For Angular 19 and later, don't add the standalone flag in Component Decorator meta data, because it is true by default.

## Modern Routing with Lazy Loading

- Always use loadComponent for lazy loading standalone components or groups of component routes

- For accessing route parameter in component, use withComponentInputBinding function with provideRouter in the app.config. Then you can use the same name parameter in the components as an input signal